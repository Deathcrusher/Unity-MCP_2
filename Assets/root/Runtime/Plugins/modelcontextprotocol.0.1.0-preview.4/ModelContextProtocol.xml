<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModelContextProtocol</name>
    </assembly>
    <members>
        <member name="T:ModelContextProtocol.AIContentExtensions">
            <summary>Provides helpers for conversions related to <see cref="T:Microsoft.Extensions.AI.AIContent"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToChatMessage(ModelContextProtocol.Protocol.Types.PromptMessage)">
            <summary>Creates a <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> from a <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/>.</summary>
            <param name="promptMessage">The message to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>.</returns>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToChatMessages(ModelContextProtocol.Protocol.Types.GetPromptResult)">
            <summary>Creates <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>s from a <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/>.</summary>
            <param name="promptResult">The messages to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>.</returns>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)">
            <summary>Gets <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances for the specified <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>.</summary>
            <param name="chatMessage">The message for which to extract its contents as <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances.</param>
            <returns>The converted content.</returns>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContent(ModelContextProtocol.Protocol.Types.Content)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.AI.AIContent"/> from the content of a <see cref="T:ModelContextProtocol.Protocol.Types.Content"/>.</summary>
            <param name="content">The <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIContent"/>.</returns>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContent(ModelContextProtocol.Protocol.Types.ResourceContents)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.AI.AIContent"/> from the content of a <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</summary>
            <param name="content">The <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/> to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIContent"/>.</returns>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContents(System.Collections.Generic.IEnumerable{ModelContextProtocol.Protocol.Types.Content})">
            <summary>Creates a list of <see cref="T:Microsoft.Extensions.AI.AIContent"/> from a sequence of <see cref="T:ModelContextProtocol.Protocol.Types.Content"/>.</summary>
            <param name="contents">The <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> instances to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIContent"/> instances.</returns>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContents(System.Collections.Generic.IEnumerable{ModelContextProtocol.Protocol.Types.ResourceContents})">
            <summary>Creates a list of <see cref="T:Microsoft.Extensions.AI.AIContent"/> from a sequence of <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</summary>
            <param name="contents">The <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/> instances to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIContent"/> instances.</returns>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.GetBase64Data(Microsoft.Extensions.AI.DataContent)">
            <summary>Extracts the data from a <see cref="T:Microsoft.Extensions.AI.DataContent"/> as a Base64 string.</summary>
        </member>
        <member name="T:ModelContextProtocol.Client.IMcpClient">
            <summary>
            Represents an instance of an MCP client connecting to a specific server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.IMcpClient.ServerCapabilities">
            <summary>
            Gets the capabilities supported by the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.IMcpClient.ServerInfo">
            <summary>
            Gets the version and implementation information of the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.IMcpClient.ServerInstructions">
            <summary>
            Instructions describing how to use the server and its features.
            This can be used by clients to improve the LLM's understanding of available tools, resources, etc. 
            It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClient">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClient.#ctor(ModelContextProtocol.Protocol.Transport.IClientTransport,ModelContextProtocol.Client.McpClientOptions,ModelContextProtocol.McpServerConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Client.McpClient"/> class.
            </summary>
            <param name="clientTransport">The transport to use for communication with the server.</param>
            <param name="options">Options for the client, defining protocol version and capabilities.</param>
            <param name="serverConfig">The server configuration.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.ServerCapabilities">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.ServerInfo">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.ServerInstructions">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.EndpointName">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClient.DisposeUnsynchronizedAsync">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientException">
            <summary>
            Represents errors that occur in the MCP client.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientException.ErrorCode">
            <summary>
            Gets the error code if this exception was caused by a JSON-RPC error response.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Client.McpClientException"/> class.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Client.McpClientException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Client.McpClientException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">The error code associated with the JSON-RPC error response.</param>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Client.McpClientException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientExtensions">
            <summary>Provides extension methods for interacting with an <see cref="T:ModelContextProtocol.Client.IMcpClient"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.PingAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Sends a ping request to verify server connectivity.
            </summary>
            <param name="client">The client.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that completes when the ping is successful.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListToolsAsync(ModelContextProtocol.Client.IMcpClient,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available tools from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="serializerOptions">The serializer options governing tool parameter serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A list of all available tools.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateToolsAsync(ModelContextProtocol.Client.IMcpClient,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available tools from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="serializerOptions">The serializer options governing tool parameter serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>An asynchronous sequence of all available tools.</returns>
            <remarks>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in requerying the server and yielding the sequence of available tools.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListPromptsAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available prompts from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A list of all available prompts.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumeratePromptsAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available prompts from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>An asynchronous sequence of all available prompts.</returns>
            <remarks>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in requerying the server and yielding the sequence of available prompts.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.GetPromptAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific prompt with optional arguments.
            </summary>
            <param name="client">The client.</param>
            <param name="name">The name of the prompt to retrieve</param>
            <param name="arguments">Optional arguments for the prompt</param>
            <param name="serializerOptions">The serialization options governing argument serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task containing the prompt's content and messages.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListResourceTemplatesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available resource templates from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A list of all available resource templates.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourceTemplatesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available resource templates from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>An asynchronous sequence of all available resource templates.</returns>
            <remarks>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in requerying the server and yielding the sequence of available resource templates.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListResourcesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available resources from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A list of all available resources.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourcesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available resources from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>An asynchronous sequence of all available resources.</returns>
            <remarks>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in requerying the server and yielding the sequence of available resources.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ReadResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a resource from the server.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.GetCompletionAsync(ModelContextProtocol.Client.IMcpClient,ModelContextProtocol.Protocol.Types.Reference,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the completion options for a resource or prompt reference and (named) argument.
            </summary>
            <param name="client">The client.</param>
            <param name="reference">A resource (uri) or prompt (name) reference</param>
            <param name="argumentName">Name of argument. Must be non-null and non-empty.</param>
            <param name="argumentValue">Value of argument. Must be non-null.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.SubscribeToResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Subscribes to a resource on the server.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.UnsubscribeFromResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Unsubscribes from a resource on the server.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.CallToolAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Invokes a tool on the server with optional arguments.
            </summary>
            <param name="client">The client.</param>
            <param name="toolName">The name of the tool to call.</param>
            <param name="arguments">Optional arguments for the tool.</param>
            <param name="serializerOptions">The serialization options governing argument serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task containing the tool's response.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ToChatClientArguments(ModelContextProtocol.Protocol.Types.CreateMessageRequestParams)">
            <summary>
            Converts the contents of a <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams"/> into a pair of
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instances to use
            as inputs into a <see cref="T:Microsoft.Extensions.AI.IChatClient"/> operation.
            </summary>
            <param name="requestParams"></param>
            <returns>The created pair of messages and options.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ToCreateMessageResult(Microsoft.Extensions.AI.ChatResponse)">
            <summary>Converts the contents of a <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> into a <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageResult"/>.</summary>
            <param name="chatResponse">The <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> whose contents should be extracted.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageResult"/>.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.CreateSamplingHandler(Microsoft.Extensions.AI.IChatClient)">
            <summary>
            Creates a sampling handler for use with <see cref="P:ModelContextProtocol.Protocol.Types.SamplingCapability.SamplingHandler"/> that will
            satisfy sampling requests using the specified <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.
            </summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/> with which to satisfy sampling requests.</param>
            <returns>The created handler delegate.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.SetLoggingLevel(ModelContextProtocol.Client.IMcpClient,ModelContextProtocol.Protocol.Types.LoggingLevel,System.Threading.CancellationToken)">
            <summary>
            Configures the minimum logging level for the server.
            </summary>
            <param name="client">The client.</param>
            <param name="level">The minimum log level of messages to be generated.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientFactory">
            <summary>Provides factory methods for creating MCP clients.</summary>
        </member>
        <member name="F:ModelContextProtocol.Client.McpClientFactory.s_defaultClientOptions">
            <summary>Default client options to use when none are supplied.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientFactory.CreateDefaultClientOptions">
            <summary>Creates default client options to use when no options are supplied.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientFactory.CreateAsync(ModelContextProtocol.McpServerConfig,ModelContextProtocol.Client.McpClientOptions,System.Func{ModelContextProtocol.McpServerConfig,Microsoft.Extensions.Logging.ILoggerFactory,ModelContextProtocol.Protocol.Transport.IClientTransport},Microsoft.Extensions.Logging.ILoggerFactory,System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Client.IMcpClient"/>, connecting it to the specified server.</summary>
            <param name="serverConfig">Configuration for the target server to which the client should connect.</param>
            <param name="clientOptions">
            A client configuration object which specifies client capabilities and protocol version.
            If <see langword="null"/>, details based on the current process will be employed.
            </param>
            <param name="createTransportFunc">An optional factory method which returns transport implementations based on a server configuration.</param>
            <param name="loggerFactory">A logger factory for creating loggers for clients.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>An <see cref="T:ModelContextProtocol.Client.IMcpClient"/> that's connected to the specified server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverConfig"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientOptions"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="serverConfig"/> contains invalid information.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="createTransportFunc"/> returns an invalid transport.</exception>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientOptions">
            <summary>
            Configuration options for the MCP client. This is passed to servers during the initialization sequence, letting them know about the client's capabilities and
            protocol version.
            <see href="https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/lifecycle/">See the protocol specification for details on capability negotiation</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.ClientInfo">
            <summary>
            Information about this client implementation.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.Capabilities">
            <summary>
            Client capabilities to advertise to the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.ProtocolVersion">
            <summary>
            Protocol version to request from the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.InitializationTimeout">
            <summary>
            Timeout for initialization sequence.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientPrompt">
            <summary>Provides an invocable prompt.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientPrompt.ProtocolPrompt">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Prompt"/> type for this instance.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientPrompt.GetAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific prompt with optional arguments.
            </summary>
            <param name="arguments">Optional arguments for the prompt</param>
            <param name="serializerOptions">The serialization options governing argument serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task containing the prompt's content and messages.</returns>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientPrompt.Name">
            <summary>Gets the name of the prompt.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientPrompt.Description">
            <summary>Gets a description of the prompt.</summary>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientTool">
            <summary>Provides an AI function that calls a tool through <see cref="T:ModelContextProtocol.Client.IMcpClient"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.WithName(System.String)">
            <summary>
            Creates a new instance of the tool with the specified name.
            This is useful for optimizing the tool name for specific models or for prefixing the tool name with a (usually server-derived) namespace to avoid conflicts.
            The server will still be called with the original tool name, so no mapping is required.
            </summary>
            <param name="name">The model-facing name to give the tool.</param>
            <returns>Copy of this McpClientTool with the provided name</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.WithDescription(System.String)">
            <summary>
            Creates a new instance of the tool with the specified description.
            This can be used to provide modified or additional (e.g. examples) context to the model about the tool.
            This will in general require a hard-coded mapping in the client. 
            It is not recommended to use this without running evaluations to ensure the model actually benefits from the custom description.
            </summary>
            <param name="description">The description to give the tool.</param>
            <returns>Copy of this McpClientTool with the provided description</returns>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.ProtocolTool">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Tool"/> type for this instance.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.Name">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.Description">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.JsonSchema">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.JsonSerializerOptions">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.InvokeCoreAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.McpServerConfig">
            <summary>
            Configuration for an MCP server connection.
            This is passed to the client factory to create a client for a specific server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.McpServerConfig.Id">
            <summary>
            Unique identifier for this server configuration.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.McpServerConfig.Name">
            <summary>
            Display name for the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.McpServerConfig.TransportType">
            <summary>
            The type of transport to use.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.McpServerConfig.Location">
            <summary>
            For stdio transport: path to the executable
            For HTTP transport: base URL of the server
            </summary>
        </member>
        <member name="P:ModelContextProtocol.McpServerConfig.TransportOptions">
            <summary>
            Additional transport-specific configuration.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Diagnostics.ShortSecondsBucketBoundaries">
            <summary>
            Follows boundaries from http.server.request.duration/http.client.request.duration
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Diagnostics.LongSecondsBucketBoundaries">
            <summary>
            Not based on a standard. Larger bucket sizes for longer lasting operations, e.g. HTTP connection duration.
            See https://github.com/open-telemetry/semantic-conventions/issues/336
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Hosting.StdioMcpServerHostedService">
            <summary>
            Hosted service for a single-session (i.e stdio) MCP server.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Hosting.StdioMcpServerHostedService.#ctor(ModelContextProtocol.Server.IMcpServer)">
            <summary>
            Hosted service for a single-session (i.e stdio) MCP server.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Hosting.StdioMcpServerHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Hosting.TcpMcpServerHostedService">
            <summary>
            Hosted service for a single-session (i.e TCP) MCP server.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Hosting.TcpMcpServerHostedService.#ctor(ModelContextProtocol.Server.IMcpServer)">
            <summary>
            Hosted service for a single-session (i.e TCP) MCP server.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Hosting.TcpMcpServerHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.IMcpEndpoint">
            <summary>Represents a client or server MCP endpoint.</summary>
        </member>
        <member name="M:ModelContextProtocol.IMcpEndpoint.SendRequestAsync(ModelContextProtocol.Protocol.Messages.JsonRpcRequest,System.Threading.CancellationToken)">
            <summary>Sends a JSON-RPC request to the connected endpoint.</summary>
            <param name="request">The JSON-RPC request to send.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task containing the client's response.</returns>
        </member>
        <member name="M:ModelContextProtocol.IMcpEndpoint.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <summary>Sends a message to the connected endpoint.</summary>
            <param name="message">The message.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.IMcpEndpoint.AddNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.Tasks.Task})">
            <summary>
            Adds a handler for server notifications of a specific method.
            </summary>
            <param name="method">The notification method to handle.</param>
            <param name="handler">The async handler function to process notifications.</param>
            <remarks>
            <para>
            Each method may have multiple handlers. Adding a handler for a method that already has one
            will not replace the existing handler.
            </para>
            <para>
            <see cref="T:ModelContextProtocol.Protocol.Messages.NotificationMethods"> provides constants for common notification methods.</see>
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Logging.Log">
            <summary>
            Logging methods for the ModelContextProtocol library.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Logging.Log.TransportMessageBytes(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs the byte representation of a message in UTF-8 encoding.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="endpointName">The name of the endpoint.</param>
            <param name="byteRepresentation">The byte representation as a hex string.</param>
        </member>
        <member name="M:ModelContextProtocol.Logging.Log.TransportMessageBytesUtf8(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs the byte representation of a message for diagnostic purposes.
            This is useful for diagnosing encoding issues with non-ASCII characters.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="endpointName">The name of the endpoint.</param>
            <param name="message">The message to log bytes for.</param>
        </member>
        <member name="T:ModelContextProtocol.Logging.Log.__NoRequestFoundForMessageWithIdStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:ModelContextProtocol.Logging.Log.__NoHandlerFoundForRequestStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:ModelContextProtocol.McpEndpointExtensions">
            <summary>Provides extension methods for interacting with an <see cref="T:ModelContextProtocol.IMcpEndpoint"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendRequestAsync``2(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.JsonSerializerOptions,System.Nullable{ModelContextProtocol.Protocol.Messages.RequestId},System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request and attempts to deserialize the result to <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TParameters">The type of the request parameters to serialize from.</typeparam>
            <typeparam name="TResult">The type of the result to deserialize to.</typeparam>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name to invoke.</param>
            <param name="parameters">Object representing the request parameters.</param>
            <param name="requestId">The request id for the request.</param>
            <param name="serializerOptions">The options governing request serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the deserialized result.</returns>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendRequestAsync``2(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``1},System.Nullable{ModelContextProtocol.Protocol.Messages.RequestId},System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request and attempts to deserialize the result to <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TParameters">The type of the request parameters to serialize from.</typeparam>
            <typeparam name="TResult">The type of the result to deserialize to.</typeparam>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name to invoke.</param>
            <param name="parameters">Object representing the request parameters.</param>
            <param name="parametersTypeInfo">The type information for request parameter serialization.</param>
            <param name="resultTypeInfo">The type information for request parameter deserialization.</param>
            <param name="requestId">The request id for the request.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the deserialized result.</returns>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendNotificationAsync(ModelContextProtocol.IMcpEndpoint,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification to the server with parameters.
            </summary>
            <param name="client">The client.</param>
            <param name="method">The notification method name.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendNotificationAsync``1(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a notification to the server with parameters.
            </summary>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name to invoke.</param>
            <param name="parameters">Object representing the request parameters.</param>
            <param name="serializerOptions">The options governing request serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendNotificationAsync``1(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a notification to the server with parameters.
            </summary>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name to invoke.</param>
            <param name="parameters">Object representing the request parameters.</param>
            <param name="parametersTypeInfo">The type information for request parameter serialization.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.NotifyProgressAsync(ModelContextProtocol.IMcpEndpoint,ModelContextProtocol.Protocol.Messages.ProgressToken,ModelContextProtocol.ProgressNotificationValue,System.Threading.CancellationToken)">
            <summary>Notifies the connected endpoint of progress.</summary>
            <param name="endpoint">The endpoint issuing the notification.</param>
            <param name="progressToken">The <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> identifying the operation.</param>
            <param name="progress">The progress update to send.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task representing the completion of the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="endpoint"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:ModelContextProtocol.NullProgress">
            <summary>Provides an <see cref="T:System.IProgress`1"/> that's a nop.</summary>
        </member>
        <member name="M:ModelContextProtocol.NullProgress.Report(ModelContextProtocol.ProgressNotificationValue)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.ProgressNotificationValue">
            <summary>Provides a progress value that can be sent using <see cref="T:System.IProgress`1"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.ProgressNotificationValue.Progress">
            <summary>Gets or sets the progress thus far.</summary>
        </member>
        <member name="P:ModelContextProtocol.ProgressNotificationValue.Total">
            <summary>Gets or sets the total number of items to process (or total progress required), if known.</summary>
        </member>
        <member name="P:ModelContextProtocol.ProgressNotificationValue.Message">
            <summary>Gets or sets an optional message describing the current progress.</summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.CancelledNotification">
            <summary>
            This notification indicates that the result will be unused, so any associated processing SHOULD cease.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.CancelledNotification.RequestId">
            <summary>
            The ID of the request to cancel.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.CancelledNotification.Reason">
            <summary>
            An optional string describing the reason for the cancellation.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ErrorCodes">
            <summary>
            Standard JSON-RPC error codes as defined in the MCP specification.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.ErrorCodes.ParseError">
            <summary>
            Invalid JSON was received by the server.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.ErrorCodes.InvalidRequest">
            <summary>
            The JSON sent is not a valid Request object.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.ErrorCodes.MethodNotFound">
            <summary>
            The method does not exist / is not available.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.ErrorCodes.InvalidParams">
            <summary>
            Invalid method parameter(s).
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.ErrorCodes.InternalError">
            <summary>
            Internal JSON-RPC error.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.IJsonRpcMessage">
            <summary>
            Base interface for all JSON-RPC messages in the MCP protocol.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.IJsonRpcMessage.JsonRpc">
            <summary>
            JSON-RPC protocol version. Must be "2.0".
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.IJsonRpcMessageWithId">
            <summary>
            Base interface for JSON-RPC messages that include an ID.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.IJsonRpcMessageWithId.Id">
            <summary>
            The message identifier.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcError">
            <summary>
            An error response message in the JSON-RPC protocol.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcError.JsonRpc">
            <summary>
            JSON-RPC protocol version. Always "2.0".
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcError.Id">
            <summary>
            Request identifier matching the original request.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcError.Error">
            <summary>
            Error information.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail">
            <summary>
            Detailed error information for JSON-RPC error responses.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail.Code">
            <summary>
            Integer error code.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail.Message">
            <summary>
            Short description of the error.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail.Data">
            <summary>
            Optional additional error data.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcNotification">
            <summary>
            A notification message in the JSON-RPC protocol (a request that doesn't expect a response).
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcNotification.JsonRpc">
            <summary>
            JSON-RPC protocol version. Always "2.0".
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcNotification.Method">
            <summary>
            Name of the notification method.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcNotification.Params">
            <summary>
            Optional parameters for the notification.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcRequest">
            <summary>
            A request message in the JSON-RPC protocol.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcRequest.JsonRpc">
            <summary>
            JSON-RPC protocol version. Always "2.0".
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcRequest.Id">
            <summary>
            Request identifier. Must be a string or number and unique within the session.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcRequest.Method">
            <summary>
            Name of the method to invoke.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcRequest.Params">
            <summary>
            Optional parameters for the method.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcResponse">
            <summary>
            A successful response message in the JSON-RPC protocol.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcResponse.JsonRpc">
            <summary>
            JSON-RPC protocol version. Always "2.0".
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcResponse.Id">
            <summary>
            Request identifier matching the original request.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcResponse.Result">
            <summary>
            The result of the method invocation.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.NotificationMethods">
            <summary>
            A class containing constants for notification methods.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ToolListChangedNotification">
            <summary>
            Sent by the server when the list of tools changes.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.PromptListChangedNotification">
            <summary>
            Sent by the server when the list of prompts changes.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceListChangedNotification">
            <summary>
            Sent by the server when the list of resources changes.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceUpdatedNotification">
            <summary>
            Sent by the server when a resource is updated.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.RootsUpdatedNotification">
            <summary>
            Sent by the client when roots have been updated.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.LoggingMessageNotification">
            <summary>
            Sent by the server when a log message is generated.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.InitializedNotification">
            <summary>
            Sent from the client to the server after initialization has finished.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification">
            <summary>
            Sent to inform the receiver of a progress update for a long-running request.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.CancelledNotification">
            <summary>
            Sent by either side to indicate that it is cancelling a previously-issued request.
            </summary>
            <remarks>
            The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification
            MAY arrive after the request has already finished.
            
            This notification indicates that the result will be unused, so any associated processing SHOULD cease.
            
            A client MUST NOT attempt to cancel its `initialize` request.".
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.PaginatedResult">
            <summary>
            A paginated result payload.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor">
            <summary>
            An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressNotification">
            <summary>
            An out-of-band notification used to inform the receiver of a progress update for a long-running request.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.ProgressNotification.ProgressToken">
            <summary>
            The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.ProgressNotification.Progress">
            <summary>
            The progress thus far. This should increase every time progress is made, even if the total is unknown.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressNotification.Converter">
            <summary>Provides a <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressNotification"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressNotification.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressNotification.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.ProgressNotification,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressToken">
            <summary>
            Represents a progress token, which can be either a string or an integer.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.ProgressToken._token">
            <summary>The token, either a string or a boxed long or null.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.#ctor(System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.ProgressToken.Token">
            <summary>Gets the underlying object for this token.</summary>
            <remarks>This will either be a <see cref="T:System.String"/>, a boxed <see cref="T:System.Int64"/>, or <see langword="null"/>.</remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.ToString">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Equals(ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <summary>
            Compares this ProgressToken to another ProgressToken.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.op_Equality(ModelContextProtocol.Protocol.Messages.ProgressToken,ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <summary>
            Compares two ProgressTokens for equality.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.op_Inequality(ModelContextProtocol.Protocol.Messages.ProgressToken,ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <summary>
            Compares two ProgressTokens for inequality.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressToken.Converter">
            <summary>
            JSON converter for ProgressToken that handles both string and number values.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.ProgressToken,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.RequestId">
            <summary>
            Represents a JSON-RPC request identifier, which can be either a string or an integer.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestId._id">
            <summary>The id, either a string or a boxed long or null.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.#ctor(System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.RequestId.Id">
            <summary>Gets the underlying object for this id.</summary>
            <remarks>This will either be a <see cref="T:System.String"/>, a boxed <see cref="T:System.Int64"/>, or <see langword="null"/>.</remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.ToString">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Equals(ModelContextProtocol.Protocol.Messages.RequestId)">
            <summary>
            Compares this RequestId to another RequestId.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.op_Equality(ModelContextProtocol.Protocol.Messages.RequestId,ModelContextProtocol.Protocol.Messages.RequestId)">
            <summary>
            Compares two RequestIds for equality.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.op_Inequality(ModelContextProtocol.Protocol.Messages.RequestId,ModelContextProtocol.Protocol.Messages.RequestId)">
            <summary>
            Compares two RequestIds for inequality.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.RequestId.Converter">
            <summary>
            JSON converter for RequestId that handles both string and number values.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.RequestId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.RequestMethods">
            <summary>
            Provides names for request methods used in the Model Context Protocol (MCP).
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsList">
            <summary>
            Sent from the client to request a list of tools the server has.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsCall">
            <summary>
            Used by the client to invoke a tool provided by the server.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList">
            <summary>
            Sent from the client to request a list of prompts and prompt templates the server has.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet">
            <summary>
            Used by the client to get a prompt provided by the server.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList">
            <summary>
            Sent from the client to request a list of resources the server has.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesRead">
            <summary>
            Sent from the client to the server, to read a specific resource URI.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList">
            <summary>
            Sent from the client to request a list of resource templates the server has.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesSubscribe">
            <summary>
            Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesUnsubscribe">
            <summary>
            Sent from the client to request cancellation of resources/updated notifications from the server.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.RootsList">
            <summary>
            Sent from the server to request a list of root URIs from the client.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Ping">
            <summary>
            A ping, issued by either the server or the client, to check that the other party is still alive.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.LoggingSetLevel">
            <summary>
            A request from the client to the server, to enable or adjust logging.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete">
            <summary>
            A request from the client to the server, to ask for completion options.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.SamplingCreateMessage">
            <summary>
            A request from the server to sample an LLM via the client.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Initialize">
            <summary>
            This request is sent from the client to the server when it first connects, asking it to begin initialization.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.IClientTransport">
            <summary>
            Represents a transport mechanism for MCP communication (from the client).
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.IClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously establishes a transport session with an MCP server and returns an interface for the duplex JSON-RPC message stream.
            </summary>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>Returns an interface for the duplex JSON-RPC message stream.</returns>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.ITransport">
            <summary>
            Represents a transport mechanism for MCP communication.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.ITransport.IsConnected">
            <summary>
            Gets whether the transport is currently connected.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.ITransport.MessageReader">
            <summary>
            Channel for receiving messages from the transport.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.ITransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Sends a message through the transport.
            </summary>
            <param name="message">The message to send.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.McpTransportException">
            <summary>
            Represents errors that occur in MCP transport operations.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.McpTransportException.#ctor">
            <summary>
            Initializes a new instance of the McpTransportException class.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.McpTransportException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the McpTransportException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.McpTransportException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the McpTransportException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport">
            <summary>
            The ServerSideEvents client transport implementation
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.#ctor(ModelContextProtocol.Protocol.Transport.SseClientTransportOptions,ModelContextProtocol.McpServerConfig,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            SSE transport for client endpoints. Unlike stdio it does not launch a process, but connects to an existing server.
            The HTTP server can be local or remote, and must support the SSE protocol.
            </summary>
            <param name="transportOptions">Configuration options for the transport.</param>
            <param name="serverConfig">The configuration object indicating which server to connect to.</param>
            <param name="httpClient">The HTTP client instance used for requests.</param>
            <param name="loggerFactory">Logger factory for creating loggers.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseClientTransport">
            <summary>
            The ServerSideEvents client transport implementation
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.#ctor(ModelContextProtocol.Protocol.Transport.SseClientTransportOptions,ModelContextProtocol.McpServerConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            SSE transport for client endpoints. Unlike stdio it does not launch a process, but connects to an existing server.
            The HTTP server can be local or remote, and must support the SSE protocol.
            </summary>
            <param name="transportOptions">Configuration options for the transport.</param>
            <param name="serverConfig">The configuration object indicating which server to connect to.</param>
            <param name="loggerFactory">Logger factory for creating loggers.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.#ctor(ModelContextProtocol.Protocol.Transport.SseClientTransportOptions,ModelContextProtocol.McpServerConfig,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)">
            <summary>
            SSE transport for client endpoints. Unlike stdio it does not launch a process, but connects to an existing server.
            The HTTP server can be local or remote, and must support the SSE protocol.
            </summary>
            <param name="transportOptions">Configuration options for the transport.</param>
            <param name="serverConfig">The configuration object indicating which server to connect to.</param>
            <param name="httpClient">The HTTP client instance used for requests.</param>
            <param name="loggerFactory">Logger factory for creating loggers.</param>
            <param name="ownsHttpClient">True to dispose HTTP client on close connection.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions">
            <summary>
            Options for configuring the SSE transport.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.ConnectionTimeout">
            <summary>
            Timeout for initial connection and endpoint event.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.MaxReconnectAttempts">
            <summary>
            Number of reconnection attempts for SSE connection.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.ReconnectDelay">
            <summary>
            Delay between reconnection attempts.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.AdditionalHeaders">
            <summary>
            Headers to include in HTTP requests.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport">
            <summary>
            Implements the MCP SSE server transport protocol using the SSE response <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="sseResponseStream">The stream to write the SSE response body to.</param>
            <param name="messageEndpoint">The endpoint to send JSON-RPC messages to. Defaults to "/message".</param> 
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.#ctor(System.IO.Stream,System.String)">
            <summary>
            Implements the MCP SSE server transport protocol using the SSE response <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="sseResponseStream">The stream to write the SSE response body to.</param>
            <param name="messageEndpoint">The endpoint to send JSON-RPC messages to. Defaults to "/message".</param> 
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.IsConnected">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the transport and writes the JSON-RPC messages sent via <see cref="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)"/>
            to the SSE response stream until cancelled or disposed.
            </summary>
            <param name="cancellationToken">A token to cancel writing to the SSE response stream.</param>
            <returns>A task representing the send loop that writes JSON-RPC messages to the SSE response stream.</returns>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.MessageReader">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.OnMessageReceivedAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Handles incoming JSON-RPC messages received on the /message endpoint.
            </summary>
            <param name="message">The JSON-RPC message received.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task representing the potentially asynchronous operation to buffer or process the JSON-RPC message.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when there is an attempt to process a message before calling <see cref="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.RunAsync(System.Threading.CancellationToken)"/>.</exception>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioClientSessionTransport">
            <summary>Provides the client side of a stdio-based session transport.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientSessionTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientSessionTransport.CleanupAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioClientTransport">
            <summary>
            Provides a client MCP transport implemented via "stdio" (standard input/output).
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientTransport.#ctor(ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions,ModelContextProtocol.McpServerConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioClientTransport"/> class.
            </summary>
            <param name="options">Configuration options for the transport.</param>
            <param name="serverConfig">The server configuration for the transport.</param>
            <param name="loggerFactory">A logger factory for creating loggers.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions">
            <summary>
            Represents configuration options for the stdio transport.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.DefaultShutdownTimeout">
            <summary>
            The default timeout to wait for the server to shut down gracefully.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.Command">
            <summary>
            The command to execute to start the server process.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.Arguments">
            <summary>
            Arguments to pass to the server process.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.WorkingDirectory">
            <summary>
            The working directory for the server process.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.EnvironmentVariables">
            <summary>
            Environment variables to set for the server process.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.ShutdownTimeout">
            <summary>
            The timeout to wait for the server to shut down gracefully.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport">
            <summary>
            Provides a server MCP transport implemented via "stdio" (standard input/output).
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioServerTransport.#ctor(Microsoft.Extensions.Options.IOptions{ModelContextProtocol.Server.McpServerOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport"/> class, using
            <see cref="P:System.Console.In"/> and <see cref="P:System.Console.Out"/> for input and output streams.
            </summary>
            <param name="serverOptions">The server options.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverOptions"/> is <see langword="null"/> or contains a null name.</exception>
            <remarks>
            <para>
            By default, no logging is performed. If a <paramref name="loggerFactory"/> is supplied, it must not log
            to <see cref="P:System.Console.Out"/>, as that will interfere with the transport's output.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioServerTransport.#ctor(ModelContextProtocol.Server.McpServerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport"/> class, using
            <see cref="P:System.Console.In"/> and <see cref="P:System.Console.Out"/> for input and output streams.
            </summary>
            <param name="serverOptions">The server options.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverOptions"/> is <see langword="null"/> or contains a null name.</exception>
            <remarks>
            <para>
            By default, no logging is performed. If a <paramref name="loggerFactory"/> is supplied, it must not log
            to <see cref="P:System.Console.Out"/>, as that will interfere with the transport's output.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioServerTransport.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport"/> class, using
            <see cref="P:System.Console.In"/> and <see cref="P:System.Console.Out"/> for input and output streams.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            By default, no logging is performed. If a <paramref name="loggerFactory"/> is supplied, it must not log
            to <see cref="P:System.Console.Out"/>, as that will interfere with the transport's output.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport">
            <summary>Provides the client side of a stream-based session transport.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport.#ctor(System.IO.TextWriter,System.IO.TextReader,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport"/> class.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamClientTransport">
            <summary>
            Provides a client MCP transport implemented around a pair of input/output streams.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientTransport.#ctor(System.IO.Stream,System.IO.Stream,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StreamClientTransport"/> class.
            </summary>
            <param name="serverInput">
            The stream representing the connected server's input. 
            Writes to this stream will be sent to the server.
            </param>
            <param name="serverOutput">
            The stream representing the connected server's output.
            Reads from this stream will receive messages from the server.
            </param>
            <param name="loggerFactory">A logger factory for creating loggers.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamServerTransport">
            <summary>
            Provides a server MCP transport implemented around a pair of input/output streams.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamServerTransport.#ctor(System.IO.Stream,System.IO.Stream,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StreamServerTransport"/> class with explicit input/output streams.
            </summary>
            <param name="inputStream">The input <see cref="T:System.IO.Stream"/> to use as standard input.</param>
            <param name="outputStream">The output <see cref="T:System.IO.Stream"/> to use as standard output.</param>
            <param name="serverName">Optional name of the server, used for diagnostic purposes, like logging.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputStream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="outputStream"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamServerTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamServerTransport.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.TcpServerTransport">
            <summary>
            Provides a server MCP transport implemented around a TCP connection.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TcpServerTransport.#ctor(ModelContextProtocol.Server.McpServerTcpTransportOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.TcpServerTransport"/> class.
            </summary>
            <param name="options">Configuration options for the transport.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TcpServerTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TcpServerTransport.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.TransportBase">
            <summary>
            Base class for implementing MCP transports with common functionality.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.TransportBase"/> class.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.TransportBase.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.TransportBase.MessageReader">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.SendMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.WriteMessageAsync(ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Writes a message to the message channel.
            </summary>
            <param name="message">The message to write.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.SetConnected(System.Boolean)">
            <summary>
            Sets the connected state of the transport.
            </summary>
            <param name="isConnected">Whether the transport is connected.</param>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.TransportTypes">
            <summary>
            List all transport types
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Transport.TransportTypes.StdIo">
            <summary>
            The name of the Standard IO transport.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Transport.TransportTypes.Sse">
            <summary>
            The name of the ServerSideEvents transport.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Annotations">
            <summary>
            Represents annotations that can be attached to content.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Annotations.Audience">
            <summary>
            Describes who the intended customer of this object or data is.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Annotations.Priority">
            <summary>
            Describes how important this data is for operating the server (0 to 1).
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Argument">
            <summary>
            Used for completion requests to provide additional context for the completion options.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Argument.Name">
            <summary>
            The name of the argument.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Argument.Value">
            <summary>
            The value of the argument to use for completion matching.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.BlobResourceContents">
            <summary>
            Binary contents of a resource.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.BlobResourceContents.Blob">
            <summary>
            The base64-encoded string representing the binary data of the item.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CallToolRequestParams">
            <summary>
            Used by the client to invoke a tool provided by the server.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Name">
            <summary>
            Tool name.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments">
            <summary>
            Optional arguments to pass to the tool.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CallToolResponse">
            <summary>
            The server's response to a tool call.
            
            Any errors that originate from the tool SHOULD be reported inside the result
            object, with `isError` set to true, _not_ as an MCP protocol-level error
            response. Otherwise, the LLM would not be able to see that an error occurred
            and self-correct.
            
            However, any errors in _finding_ the tool, an error indicating that the
            server does not support tool calls, or any other exceptional conditions,
            should be reported as an MCP error response.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolResponse.Content">
            <summary>
            The server's response to a tools/call request from the client.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolResponse.IsError">
            <summary>
            Whether the tool call was unsuccessful. If true, the call was unsuccessful.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ClientCapabilities">
            <summary>
            Represents the capabilities that a client may support.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Experimental">
            <summary>
            Experimental, non-standard capabilities that the client supports.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Roots">
            <summary>
            Present if the client supports listing roots.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Sampling">
            <summary>
            Present if the client supports sampling from an LLM.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.RootsCapability">
            <summary>
            Represents the roots capability configuration.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RootsCapability.ListChanged">
            <summary>
            Whether the client supports notifications for changes to the roots list.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RootsCapability.RootsHandler">
            <summary>Gets or sets the handler for sampling requests.</summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SamplingCapability">
            <summary>
            Represents the sampling capability configuration.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SamplingCapability.SamplingHandler">
            <summary>Gets or sets the handler for sampling requests.</summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.LoggingCapability">
            <summary>
            Represents the logging capability configuration.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingCapability.SetLoggingLevelHandler">
            <summary>
            Gets or sets the handler for set logging level requests.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PromptsCapability">
            <summary>
            Represents the prompts capability configuration.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListChanged">
            <summary>
            Whether this server supports notifications for changes to the prompt list.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListPromptsHandler">
            <summary>
            Gets or sets the handler for list prompts requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.GetPromptHandler">
            <summary>
            Gets or sets the handler for get prompt requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection">
            <summary>Gets or sets a collection of prompts served by the server.</summary>
            <remarks>
            Prompts will specified via <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/> augment the <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListPromptsHandler"/> and
            <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.GetPromptHandler"/>, if provided. ListPrompts requests will output information about every prompt
            in <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/> and then also any tools output by <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListPromptsHandler"/>, if it's
            non-<see langword="null"/>. GetPrompt requests will first check <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/> for the prompt
            being requested, and if the tool is not found in the <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/>, any specified <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.GetPromptHandler"/>
            will be invoked as a fallback.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourcesCapability">
            <summary>
            Represents the resources capability configuration.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.Subscribe">
            <summary>
            Whether this server supports subscribing to resource updates.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListChanged">
            <summary>
            Whether this server supports notifications for changes to the resource list.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListResourceTemplatesHandler">
            <summary>
            Gets or sets the handler for list resource templates requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListResourcesHandler">
            <summary>
            Gets or sets the handler for list resources requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ReadResourceHandler">
            <summary>
            Gets or sets the handler for read resources requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.SubscribeToResourcesHandler">
            <summary>
            Gets or sets the handler for subscribe to resources messages.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.UnsubscribeFromResourcesHandler">
            <summary>
            Gets or sets the handler for unsubscribe from resources messages.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ToolsCapability">
            <summary>
            Represents the tools capability configuration.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListChanged">
            <summary>
            Gets or sets whether this server supports notifications for changes to the tool list.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListToolsHandler">
            <summary>
            Gets or sets the handler for list tools requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.CallToolHandler">
            <summary>
            Gets or sets the handler for call tool requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection">
            <summary>Gets or sets a collection of tools served by the server.</summary>
            <remarks>
            Tools will specified via <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/> augment the <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListToolsHandler"/> and
            <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.CallToolHandler"/>, if provided. ListTools requests will output information about every tool
            in <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/> and then also any tools output by <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListToolsHandler"/>, if it's
            non-<see langword="null"/>. CallTool requests will first check <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/> for the tool
            being requested, and if the tool is not found in the <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/>, any specified <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.CallToolHandler"/>
            will be invoked as a fallback.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CompleteRequestParams">
            <summary>
            A request from the client to the server, to ask for completion options.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CompleteRequestParams.Ref">
            <summary>
            The reference's information
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CompleteRequestParams.Argument">
            <summary>
            The argument's information
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CompleteResult">
            <summary>
            The server's response to a completion/complete request
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CompleteResult.Completion">
            <summary>
            The completion object containing the completion values.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Completion">
            <summary>
            Represents a completion object in the server's response
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Completion.Values">
            <summary>
            An array of completion values. Must not exceed 100 items.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Completion.Total">
            <summary>
            The total number of completion options available. This can exceed the number of values actually sent in the response.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Completion.HasMore">
            <summary>
            Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Content">
            <summary>
            Represents the content of a tool response.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            There are multiple subtypes of content, depending on the "type" field, these are represented as separate classes.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Type">
            <summary>
            The type of content. This determines the structure of the content object. Can be "image", "audio", "text", "resource".
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Text">
            <summary>
            The text content of the message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Data">
            <summary>
            The base64-encoded image data.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.MimeType">
            <summary>
            The MIME type of the image.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Resource">
            <summary>
            The resource content of the message (if embedded).
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Annotations">
            <summary>
            Optional annotations for the content.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ContextInclusion">
            <summary>
            A request to include context from one or more MCP servers (including the caller), to be attached to the prompt.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.ContextInclusion.None">
            <summary>
            No context should be included.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.ContextInclusion.ThisServer">
            <summary>
            Include context from the server that sent the request.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.ContextInclusion.AllServers">
            <summary>
            Include context from all servers that the client is connected to.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams">
            <summary>
            A request from the server to sample an LLM via the client. 
            The client has full discretion over which model to select. 
            The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
            
            While these align with the protocol specification,
            clients have full discretion over model selection and should inform users before sampling.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.IncludeContext">
            <summary>
            A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.MaxTokens">
            <summary>
            The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.Messages">
            <summary>
            Messages requested by the server to be included in the prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.Metadata">
            <summary>
            Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.ModelPreferences">
            <summary>
            The server's preferences for which model to select. The client MAY ignore these preferences.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.StopSequences">
            <summary>
            Optional stop sequences that the server wants to use for sampling.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.SystemPrompt">
            <summary>
            An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.Temperature">
            <summary>
            The temperature to use for sampling, as requested by the server.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CreateMessageResult">
            <summary>
            The client's response to a sampling/create_message request from the server. 
            The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) 
             and decide whether to allow the server to see it.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.Content">
            <summary>
            Text or image content of the message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.Model">
            <summary>
            The name of the model that generated the message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.StopReason">
            <summary>
            The reason why sampling stopped, if known.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.Role">
            <summary>
            The role of the user who generated the message.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.EmptyResult">
            <summary>
            An empty result object.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.GetPromptRequestParams">
            <summary>
            Used by the client to get a prompt provided by the server.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Name">
            <summary>
            he name of the prompt or prompt template.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments">
            <summary>
            Arguments to use for templating the prompt.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.GetPromptResult">
            <summary>
            The server's response to a prompts/get request from the client.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptResult.Description">
            <summary>
            An optional description for the prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptResult.Messages">
            <summary>
            The prompt or prompt template that the server offers.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Implementation">
            <summary>
            Describes the name and version of an MCP implementation.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Implementation.Name">
            <summary>
            Name of the implementation.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Implementation.Version">
            <summary>
            Version of the implementation.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.InitializeRequestParams">
            <summary>
            Parameters for an initialization request sent to the server.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeRequestParams.ProtocolVersion">
            <summary>
            The version of the Model Context Protocol that the client wants to use.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeRequestParams.Capabilities">
            <summary>
            The client's capabilities.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeRequestParams.ClientInfo">
            <summary>
            Information about the client implementation.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.InitializeResult">
            <summary>
            Result of the initialization request sent to the server.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.ProtocolVersion">
            <summary>
            The version of the Model Context Protocol that the server wants to use.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.Capabilities">
            <summary>
            The server's capabilities.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.ServerInfo">
            <summary>
            Information about the server implementation.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.Instructions">
            <summary>
            Optional instructions for using the server and its features.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListPromptsRequestParams">
            <summary>
            Sent from the client to request a list of prompts and prompt templates the server has.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListPromptsResult">
            <summary>
            The server's response to a prompts/list request from the client.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListPromptsResult.Prompts">
            <summary>
            A list of prompts or prompt templates that the server offers.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourcesRequestParams">
            <summary>
            Sent from the client to request a list of resources the server has.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourcesResult">
            <summary>
            The server's response to a resources/list request from the client.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListResourcesResult.Resources">
            <summary>
            A list of resources that the server offers.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourceTemplatesRequestParams">
            <summary>
            Sent from the client to request a list of resource templates the server has.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourceTemplatesResult">
            <summary>
            The server's response to a resources/templates/list request from the client.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListResourceTemplatesResult.ResourceTemplates">
            <summary>
            A list of resource templates that the server offers.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListRootsRequestParams">
            <summary>
            A request from the server to get a list of root URIs from the client.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListRootsResult">
            <summary>
            The client's response to a roots/list request from the server.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListRootsResult.Meta">
            <summary>
            Additional metadata for the result. Reserved by the protocol for future use.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListRootsResult.Roots">
            <summary>
            The list of root URIs provided by the client.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListToolsRequestParams">
            <summary>
            Sent from the client to request a list of tools the server has.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListToolsResult">
            <summary>
            A response to a request to list the tools available on the server.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListToolsResult.Tools">
            <summary>
            The server's response to a tools/list request from the client.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.LoggingLevel">
            <summary>
            The severity of a log message.
            These map to syslog message severities, as specified in RFC-5424:
            https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Debug">
            <summary>Detailed debug information, typically only valuable to developers.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Info">
            <summary>Normal operational messages that require no action.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Notice">
            <summary>Normal but significant events that might deserve attention.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Warning">
            <summary>Warning conditions that don't represent an error but indicate potential issues.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Error">
            <summary>Error conditions that should be addressed but don't require immediate action.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Critical">
            <summary>Critical conditions that require immediate attention.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Alert">
            <summary>Action must be taken immediately to address the condition.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Emergency">
            <summary>System is unusable and requires immediate attention.</summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams">
            <summary>
            Sent from the server as the payload of "notifications/message" notifications whenever a log message is generated.
            
            If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Level">
            <summary>
            The severity of this log message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Logger">
            <summary>
            An optional name of the logger issuing this message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Data">
            <summary>
            The data to be logged, such as a string message or an object.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ModelHint">
            <summary>
            Hints to use for model selection.
            Keys not declared here are currently left unspecified by the spec and are up
            to the client to interpret.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelHint.Name">
            <summary>
            A hint for a model name.
            
            The client SHOULD treat this as a substring of a model name; for example:
            - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`
            - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.
            - `claude` should match any Claude model
            
            The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:
            - `gemini-1.5-flash` could match `claude-3-haiku-20240307`
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ModelPreferences">
            <summary>
            The server's preferences for model selection, requested of the client during sampling.
            Because LLMs can vary along multiple dimensions, choosing the \"best\" model is
            rarely straightforward.  Different models excel in different areas—some are
            faster but less capable, others are more capable but more expensive, and so
            on. This interface allows servers to express their priorities across multiple
            dimensions to help clients make an appropriate selection for their use case.
            
            These preferences are always advisory. The client MAY ignore them. It is also
            up to the client to decide how to interpret these preferences and how to
            balance them against other considerations.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.CostPriority">
            <summary>
            How much to prioritize cost when selecting a model. A value of 0 means cost\nis not important, while a value of 1 means cost is the most important
            factor.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.Hints">
            <summary>
            Optional hints to use for model selection.
            
            If multiple hints are specified, the client MUST evaluate them in order
            (such that the first match is taken).
            
            The client SHOULD prioritize these hints over the numeric priorities, but
            MAY still use the priorities to select from ambiguous matches.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.SpeedPriority">
            <summary>
            How much to prioritize sampling speed (latency) when selecting a model. A
            value of 0 means speed is not important, while a value of 1 means speed is
            the most important factor.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.IntelligencePriority">
            <summary>
            How much to prioritize intelligence and capabilities when selecting a
            model. A value of 0 means intelligence is not important, while a value of 1
            means intelligence is the most important factor.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.ModelPreferences.Validate(System.String@)">
            <summary>
            Validates the model preferences.
            </summary>
            <param name="errorMessage">Error message if object isn't valid</param>
            <returns>True if valid, false if invalid</returns>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PaginatedRequestParams">
            <summary>
            Used as a base class for paginated requests.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/2024-11-05/schema.json">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PaginatedRequestParams.Cursor">
            <summary>
            An opaque token representing the current pagination position.
            If provided, the server should return results starting after this cursor.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PingResult">
            <summary>
            Dummy result for the ping request.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Prompt">
            <summary>
            A prompt or prompt template that the server offers.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Prompt.Arguments">
            <summary>
            A list of arguments to use for templating the prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Prompt.Description">
            <summary>
            An optional description of what this prompt provides
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Prompt.Name">
            <summary>
            The name of the prompt or prompt template.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PromptArgument">
            <summary>
            Describes an argument that a prompt can accept.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptArgument.Name">
            <summary>
            The name of the argument.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptArgument.Description">
            <summary>
            A human-readable description of the argument.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptArgument.Required">
            <summary>
            Whether this argument must be provided.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PromptMessage">
            <summary>
            Describes a message returned as part of a prompt.
            
            This is similar to `SamplingMessage`, but also supports the embedding of 
            resources from the MCP server.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptMessage.Content">
            <summary>
            The content of the message. Any of TextContent, ImageContent, EmbeddedResource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptMessage.Role">
            <summary>
            The role of the message ("user" or "assistant").
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ReadResourceRequestParams">
            <summary>
            Sent from the client to the server, to read a specific resource URI.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ReadResourceRequestParams.Uri">
            <summary>
            The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ReadResourceResult">
            <summary>
            The server's response to a resources/read request from the client.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ReadResourceResult.Contents">
            <summary>
            A list of ResourceContents that this resource contains.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Reference">
            <summary>
            Represents a reference to a resource or prompt. Umbrella type for both ResourceReference and PromptReference from the spec schema.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Reference.Type">
            <summary>
            The type of content. Can be ref/resource or ref/prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Reference.Uri">
            <summary>
            The URI or URI template of the resource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Reference.Name">
            <summary>
            The name of the prompt or prompt template.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.Reference.ToString">
            <summary>
            Returns a string representation of the reference.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.Reference.Validate(System.String@)">
            <summary>
            Validates the reference object.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.RequestParams">
            <summary>
            Base class for all request parameters.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/#L771-L806">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RequestParams.Meta">
            <summary>
            Metadata related to the tool invocation.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.RequestParamsMetadata">
            <summary>
            Metadata related to the request.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RequestParamsMetadata.ProgressToken">
            <summary>
            If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Resource">
            <summary>
            Represents a known resource that the server is capable of reading.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Uri">
            <summary>
            The URI of this resource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Name">
            <summary>
            A human-readable name for this resource.
            
            This can be used by clients to populate UI elements.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Description">
            <summary>
            A description of what this resource represents.
            
            This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.MimeType">
            <summary>
            The MIME type of this resource, if known.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Size">
            <summary>
            The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.
            
            This can be used by Hosts to display file sizes and estimate context window usage.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Annotations">
            <summary>
            Optional annotations for the resource.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceContents">
            <summary>
            Represents the content of a resource.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceContents.Uri">
            <summary>
            The URI of the resource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceContents.MimeType">
            <summary>
            The type of content.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceContents.Converter">
            <summary>
            Converter for <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.ResourceContents.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.ResourceContents.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Types.ResourceContents,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceTemplate">
            <summary>
            Represents a known resource template that the server is capable of reading.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.UriTemplate">
            <summary>
            The URI template (according to RFC 6570) that can be used to construct resource URIs.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.Name">
            <summary>
            A human-readable name for this resource template.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.Description">
            <summary>
            A description of what this resource template represents.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.MimeType">
            <summary>
            The MIME type of this resource template, if known.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.Annotations">
            <summary>
            Optional annotations for the resource template.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceUpdatedNotificationParams">
            <summary>
            Sent from the server as the payload of "notifications/resources/updated" notifications whenever a subscribed resource changes.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceUpdatedNotificationParams.Uri">
            <summary>
            The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Role">
            <summary>
            Represents the type of role in the conversation.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.Role.User">
            <summary>
            Corresponds to the user in the conversation.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.Role.Assistant">
            <summary>
            Corresponds to the AI in the conversation.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Root">
            <summary>
            Represents a root URI and its metadata.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Root.Uri">
            <summary>
            The URI of the root.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Root.Name">
            <summary>
            A human-readable name for the root.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Root.Meta">
            <summary>
            Additional metadata for the root. Reserved by the protocol for future use.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SamplingMessage">
            <summary>
            Describes a message issued to or received from an LLM API.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SamplingMessage.Content">
            <summary>
            Text or image content of the message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SamplingMessage.Role">
            <summary>
            The role of the message ("user" or "assistant").
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ServerCapabilities">
            <summary>
            Represents the capabilities that a server may support.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Experimental">
            <summary>
            Experimental, non-standard capabilities that the server supports.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Logging">
            <summary>
            Present if the server supports sending log messages to the client.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Prompts">
            <summary>
            Present if the server offers any prompt templates.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Resources">
            <summary>
            Present if the server offers any resources to read.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Tools">
            <summary>
            Present if the server offers any tools to call.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SetLevelRequestParams">
            <summary>
            A request from the client to the server, to enable or adjust logging.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SetLevelRequestParams.Level">
            <summary>
            The level of logging that the client wants to receive from the server. 
            The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SubscribeRequestParams">
            <summary>
            Sent from the client to request updated notifications from the server whenever a particular primitive changes.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SubscribeRequestParams.Uri">
            <summary>
            The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.TextResourceContents">
            <summary>
            Text contents of a resource.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.TextResourceContents.Text">
            <summary>
            The text of the item. This must only be set if the item can actually be represented as text (not binary data).
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Tool">
            <summary>
            Represents a tool that the server is capable of calling. Part of the ListToolsResponse.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.Name">
            <summary>
            The name of the tool.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.Description">
            <summary>
            A human-readable description of the tool.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.InputSchema">
            <summary>
            A JSON Schema object defining the expected parameters for the tool.
            </summary>
            <remarks>
            Needs to a valid JSON schema object that additionally is of type object.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.Annotations">
            <summary>
            Optional additional tool information.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ToolAnnotations">
            <summary>
            Additional properties describing a Tool to clients.
            NOTE: all properties in ToolAnnotations are **hints**.
            They are not guaranteed to provide a faithful description of tool behavior (including descriptive properties like `title`).
            Clients should never make tool use decisions based on ToolAnnotations received from untrusted servers.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            There are multiple subtypes of content, depending on the "type" field, these are represented as separate classes.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.Title">
            <summary>
            A human-readable title for the tool.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.DestructiveHint">
            <summary>
            If true, the tool may perform destructive updates to its environment.
            If false, the tool performs only additive updates.
            (This property is meaningful only when <see cref="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.ReadOnlyHint"/> is false).
            Default: true.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.IdempotentHint">
            <summary>
            If true, calling the tool repeatedly with the same arguments 
            will have no additional effect on its environment.
            (This property is meaningful only when <see cref="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.ReadOnlyHint"/> is false).
            Default: false.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.OpenWorldHint">
            <summary>
            If true, this tool may interact with an "open world" of external entities.
            If false, the tool's domain of interaction is closed.
            For example, the world of a web search tool is open, whereas that of a memory tool is not.
            Default: true.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.ReadOnlyHint">
            <summary>
            If true, the tool does not modify its environment.
            Default: false.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.UnsubscribeFromResourceRequestParams">
            <summary>
            Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.UnsubscribeFromResourceRequestParams.Uri">
            <summary>
            The URI of the resource to unsubscribe from.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams">
            <summary>
            Sent from the client to request not receiving updated notifications from the server whenever a primitive resource changes.
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">See the schema for details</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams.Uri">
            <summary>
            The URI of the resource to unsubscribe fro. The URI can use any protocol; it is up to the server how to interpret it.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.AIFunctionMcpServerPrompt">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that's implemented via an <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction"/>.</summary>
        </member>
        <member name="F:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.RequestContextKey">
            <summary>Key used temporarily for flowing request context into an AIFunction.</summary>
            <remarks>This will be replaced with use of AIFunctionArguments.Context.</remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(System.Delegate,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that wraps the specified <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction">
            <summary>Gets the <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction"/> wrapped by this prompt.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.#ctor(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Protocol.Types.Prompt)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> class.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.ProtocolPrompt">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.AIFunctionMcpServerTool">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that's implemented via an <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction"/>.</summary>
        </member>
        <member name="F:ModelContextProtocol.Server.AIFunctionMcpServerTool.RequestContextKey">
            <summary>Key used temporarily for flowing request context into an AIFunction.</summary>
            <remarks>This will be replaced with use of AIFunctionArguments.Context.</remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(System.Delegate,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that wraps the specified <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction">
            <summary>Gets the <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction"/> wrapped by this tool.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.#ctor(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Protocol.Types.Tool)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> class.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.ProtocolTool">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.DelegatingMcpServerPrompt">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that delegates all operations to an inner <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</summary>
            <remarks>
            This is recommended as a base type when building prompts that can be chained around an underlying <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            The default implementation simply passes each call to the inner prompt instance.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerPrompt.#ctor(ModelContextProtocol.Server.McpServerPrompt)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.DelegatingMcpServerPrompt"/> class around the specified <paramref name="innerPrompt"/>.</summary>
            <param name="innerPrompt">The inner prompt wrapped by this delegating prompt.</param>
        </member>
        <member name="P:ModelContextProtocol.Server.DelegatingMcpServerPrompt.ProtocolPrompt">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerPrompt.ToString">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.DelegatingMcpServerTool">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that delegates all operations to an inner <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</summary>
            <remarks>
            This is recommended as a base type when building tools that can be chained around an underlying <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            The default implementation simply passes each call to the inner tool instance.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerTool.#ctor(ModelContextProtocol.Server.McpServerTool)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.DelegatingMcpServerTool"/> class around the specified <paramref name="innerTool"/>.</summary>
            <param name="innerTool">The inner tool wrapped by this delegating tool.</param>
        </member>
        <member name="P:ModelContextProtocol.Server.DelegatingMcpServerTool.ProtocolTool">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerTool.ToString">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.IMcpServer">
            <summary>
            Represents a server that can communicate with a client using the MCP protocol.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.ClientCapabilities">
            <summary>
            Gets the capabilities supported by the client.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.ClientInfo">
            <summary>
            Gets the version and implementation information of the client.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.ServerOptions">
            <summary>Gets the options used to construct this server.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.Services">
            <summary>
            Gets the service provider for the server.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.IMcpServer.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the server, listening for and handling client requests.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.IMcpServerPrimitive">
            <summary>Represents an MCP server primitive, like a tool or a prompt.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServerPrimitive.Name">
            <summary>Gets the name of the primitive.</summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServer">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServer.#ctor(ModelContextProtocol.Protocol.Transport.ITransport,ModelContextProtocol.Server.McpServerOptions,Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Creates a new instance of <see cref="T:ModelContextProtocol.Server.McpServer"/>.
            </summary>
            <param name="transport">Transport to use for the server representing an already-established session.</param>
            <param name="options">Configuration options for this server, including capabilities.
            Make sure to accurately reflect exactly what capabilities the server supports and does not support.</param>
            <param name="loggerFactory">Logger factory to use for logging</param>
            <param name="serviceProvider">Optional service provider to use for dependency injection</param>
            <exception cref="T:ModelContextProtocol.Server.McpServerException"></exception>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.ClientCapabilities">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.ClientInfo">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.ServerOptions">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.Services">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.EndpointName">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServer.RunAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerException">
            <summary>
            Represents errors that occur in the MCP server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerException.ErrorCode">
            <summary>
            Gets the error code if this exception was caused by a JSON-RPC error response.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">The error code associated with the JSON-RPC error response.</param>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Client.McpClientException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerExtensions">
            <summary>Provides extension methods for interacting with an <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.RequestSamplingAsync(ModelContextProtocol.Server.IMcpServer,ModelContextProtocol.Protocol.Types.CreateMessageRequestParams,System.Threading.CancellationToken)">
            <summary>
            Requests to sample an LLM via the client.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support sampling.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.RequestSamplingAsync(ModelContextProtocol.Server.IMcpServer,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <summary>
            Requests to sample an LLM via the client.
            </summary>
            <param name="server">The server issueing the request.</param>
            <param name="messages">The messages to send as part of the request.</param>
            <param name="options">The options to use for the request.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task containing the response from the client.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="messages"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support sampling.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.AsSamplingChatClient(ModelContextProtocol.Server.IMcpServer)">
            <summary>Creates an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that can be used to send sampling requests to the client.</summary>
            <param name="server">The server to be wrapped as an <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that can be used to issue sampling requests to the client.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support sampling.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.RequestRootsAsync(ModelContextProtocol.Server.IMcpServer,ModelContextProtocol.Protocol.Types.ListRootsRequestParams,System.Threading.CancellationToken)">
            <summary>
            Requests the client to list the roots it exposes.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support roots.</exception>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient">
            <summary>Provides an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> implementation that's implemented via client sampling.</summary>
            <param name="server"></param>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.#ctor(ModelContextProtocol.Server.IMcpServer)">
            <summary>Provides an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> implementation that's implemented via client sampling.</summary>
            <param name="server"></param>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.Microsoft#Extensions#AI#IChatClient#GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.Microsoft#Extensions#AI#IChatClient#GetService(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerFactory">
            <summary>
            Provides a factory for creating <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instances.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerFactory.Create(ModelContextProtocol.Protocol.Transport.ITransport,ModelContextProtocol.Server.McpServerOptions,Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.IMcpServer"/> class.
            </summary>
            <param name="transport">Transport to use for the server representing an already-established MCP session.</param>
            <param name="serverOptions">
            Configuration options for this server, including capabilities. 
            Make sure to accurately reflect exactly what capabilities the server supports and does not support.
            </param>
            <param name="loggerFactory">Logger factory to use for logging</param>
            <param name="serviceProvider">Optional service provider to create new instances.</param>
            <returns>An <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="transport"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverOptions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerHandlers">
            <summary>
            Container for handlers used in the creation of an MCP server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListToolsHandler">
            <summary>
            Gets or sets the handler for list tools requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.CallToolHandler">
            <summary>
            Gets or sets the handler for call tool requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListPromptsHandler">
            <summary>
            Gets or sets the handler for list prompts requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.GetPromptHandler">
            <summary>
            Gets or sets the handler for get prompt requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListResourceTemplatesHandler">
            <summary>
            Gets or sets the handler for list resource templates requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListResourcesHandler">
            <summary>
            Gets or sets the handler for list resources requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ReadResourceHandler">
            <summary>
            Gets or sets the handler for read resources requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.GetCompletionHandler">
            <summary>
            Gets or sets the handler for get completion requests.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.SubscribeToResourcesHandler">
            <summary>
            Gets or sets the handler for subscribe to resources messages.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.UnsubscribeFromResourcesHandler">
            <summary>
            Gets or sets the handler for unsubscribe from resources messages.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.SetLoggingLevelHandler">
            <summary>
            Get or sets the handler for set logging level requests.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerHandlers.OverwriteWithSetHandlers(ModelContextProtocol.Server.McpServerOptions)">
            <summary>
            Overwrite any handlers in McpServerOptions with non-null handlers from this instance.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerOptions">
            <summary>
            Configuration options for the MCP server. This is passed to the client during the initialization sequence, letting it know about the server's capabilities and
            protocol version.
            <see href="https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/lifecycle/">See the protocol specification for details on capability negotiation</see>
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.ServerInfo">
            <summary>
            Information about this server implementation.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.Capabilities">
            <summary>
            Server capabilities to advertise to the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.ProtocolVersion">
            <summary>
            Protocol version to request from the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.InitializationTimeout">
            <summary>
            Timeout for initialization sequence.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.ServerInstructions">
            <summary>
            Optional server instructions to send to clients
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.GetCompletionHandler">
            <summary>
            Gets or sets the handler for get completion requests.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPrimitiveCollection`1">
            <summary>Provides a thread-safe collection of <typeparamref name="T"/> instances, indexed by their names.</summary>
            <typeparam name="T">Specifies the type of primitive stored in the collection.</typeparam>
        </member>
        <member name="F:ModelContextProtocol.Server.McpServerPrimitiveCollection`1._primitives">
            <summary>Concurrent dictionary of primitives, indexed by their names.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPrimitiveCollection`1"/> class.
            </summary>
        </member>
        <member name="E:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Changed">
            <summary>Occurs when the collection is changed.</summary>
            <remarks>
            By default, this is raised when a primitive is added or removed. However, a derived implementation
            may raise this event for other reasons, such as when a primitive is modified.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Count">
            <summary>Gets the number of primitives in the collection.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.IsEmpty">
            <summary>Gets whether there are any primitives in the collection.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.RaiseChanged">
            <summary>Raises <see cref="E:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Changed"/> if there are registered handlers.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Item(System.String)">
            <summary>Gets the <typeparamref name="T"/> with the specified <paramref name="name"/> from the collection.</summary>
            <param name="name">The name of the primitive to retrieve.</param>
            <returns>The <typeparamref name="T"/> with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An primitive with the specified name does not exist in the collection.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Clear">
            <summary>Clears all primitives from the collection.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Add(`0)">
            <summary>Adds the specified <typeparamref name="T"/> to the collection.</summary>
            <param name="primitive">The primitive to be added.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A primitive with the same name as <paramref name="primitive"/> already exists in the collection.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.TryAdd(`0)">
            <summary>Adds the specified <typeparamref name="T"/> to the collection.</summary>
            <param name="primitive">The primitive to be added.</param>
            <returns><see langword="true"/> if the primitive was added; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Remove(`0)">
            <summary>Removes the specified primitivefrom the collection.</summary>
            <param name="primitive">The primitive to be removed from the collection.</param>
            <returns>
            <see langword="true"/> if the primitive was found in the collection and removed; otherwise, <see langword="false"/> if it couldn't be found.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.TryGetPrimitive(System.String,`0@)">
            <summary>Attempts to get the primitive with the specified name from the collection.</summary>
            <param name="name">The name of the primitive to retrieve.</param>
            <param name="primitive">The primitive, if found; otherwise, <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the primitive was found in the collection and return; otherwise, <see langword="false"/> if it couldn't be found.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Contains(`0)">
            <summary>Checks if a specific primitive is present in the collection of primitives.</summary>
            <param name="primitive">The primitive to search for in the collection.</param>
            <see langword="true"/> if the primitive was found in the collection and return; otherwise, <see langword="false"/> if it couldn't be found.
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.PrimitiveNames">
            <summary>Gets the names of all of the primitives in the collection.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.ToArray">
            <summary>Creates an array containing all of the primitives in the collection.</summary>
            <returns>An array containing all of the primitives in the collection.</returns>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPrompt">
            <summary>Represents an invocable prompt used by Model Context Protocol servers.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> class.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrompt.ProtocolPrompt">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Prompt"/> type for this instance.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)">
            <summary>Invokes the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</summary>
            <param name="request">The request information resulting in the invocation of this tool.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The call response from invoking the tool.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(System.Delegate,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</param>
            <param name="target">The instance if <paramref name="method"/> is an instance method; otherwise, <see langword="null"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is an instance method but <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> for
            and instance method, along with a <see cref="T:System.Type"/> representing the type of the target object to
            instantiate each time the method is invoked.
            </summary>
            <param name="method">The instance method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> to construct an instance of on which to invoke <paramref name="method"/> when
            the resulting <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is invoked. If services are provided,
            ActivatorUtilities.CreateInstance will be used to construct the instance using those services; otherwise,
            <see cref="M:System.Activator.CreateInstance(System.Type)"/> is used, utilizing the type's public parameterless constructor.
            If an instance can't be constructed, an exception is thrown during the function's invocation.
            </param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that wraps the specified <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</summary>
            <param name="function">The function to wrap.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is <see langword="null"/>.</exception>
            <remarks>
            Unlike the other overloads of Create, the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> created by <see cref="M:ModelContextProtocol.Server.McpServerPrompt.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerPromptCreateOptions)"/>
            does not provide all of the special parameter handling for MCP-specific concepts, like <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrompt.ModelContextProtocol#Server#IMcpServerPrimitive#Name">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPromptAttribute">
            <summary>
            Used to indicate that a method should be considered an MCP prompt and describe it.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPromptAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/> class.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptAttribute.Name">
            <summary>Gets the name of the prompt.</summary>
            <remarks>If <see langword="null"/>, the method name will be used.</remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPromptCreateOptions">
            <summary>Provides options for controlling the creation of an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Services">
            <summary>
            Gets or sets optional services used in the construction of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            These services will be used to determine which parameters should be satisifed from dependency injection; what services
            are satisfied via this provider should match what's satisfied via the provider passed in at invocation time.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Name">
            <summary>
            Gets or sets the name to use for the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but an <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/> is applied to the method,
            the name from the attribute will be used. If that's not present, a name based on the method's name will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Description">
            <summary>
            Gets or set the description to use for the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but a <see cref="T:System.ComponentModel.DescriptionAttribute"/> is applied to the method,
            the description from that attribute will be used.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPromptCreateOptions.Clone">
            <summary>
            Creates a shallow clone of the current <see cref="T:ModelContextProtocol.Server.McpServerPromptCreateOptions"/> instance.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPromptTypeAttribute">
            <summary>
            Used to attribute a type containing methods that should be exposed as MCP prompts.
            </summary>
            <remarks>
            This is primarily relevant to methods that scan types in an assembly looking for methods
            to expose, such as <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPromptsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly)"/>. It is not
            necessary to attribute types explicitly provided to a method like <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)"/>.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerTcpTransportOptions">
            <summary>
            Configuration options for the TcpServerTransport.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerTcpTransportOptions.Port">
            <summary>
            The TCP port to listen on.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerTcpTransportOptions.IpAddress">
            <summary>
            The TCP host to listen on. This is typically the IP address of the server. If not specified, the server will listen on all available network interfaces.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerTool">
            <summary>Represents an invocable tool used by Model Context Protocol clients and servers.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> class.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerTool.ProtocolTool">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Tool"/> type for this instance.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <summary>Invokes the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</summary>
            <param name="request">The request information resulting in the invocation of this tool.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The call response from invoking the tool.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(System.Delegate,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerTool"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</param>
            <param name="target">The instance if <paramref name="method"/> is an instance method; otherwise, <see langword="null"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerTool"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is an instance method but <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> for
            and instance method, along with a <see cref="T:System.Type"/> representing the type of the target object to
            instantiate each time the method is invoked.
            </summary>
            <param name="method">The instance method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> to construct an instance of on which to invoke <paramref name="method"/> when
            the resulting <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is invoked. If services are provided,
            ActivatorUtilities.CreateInstance will be used to construct the instance using those services; otherwise,
            <see cref="M:System.Activator.CreateInstance(System.Type)"/> is used, utilizing the type's public parameterless constructor.
            If an instance can't be constructed, an exception is thrown during the function's invocation.
            </param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that wraps the specified <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</summary>
            <param name="function">The function to wrap.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is <see langword="null"/>.</exception>
            <remarks>
            Unlike the other overloads of Create, the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> created by <see cref="M:ModelContextProtocol.Server.McpServerTool.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerToolCreateOptions)"/>
            does not provide all of the special parameter handling for MCP-specific concepts, like <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerTool.ModelContextProtocol#Server#IMcpServerPrimitive#Name">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerToolAttribute">
            <summary>
            Used to indicate that a method should be considered an MCP tool and describe it.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerToolAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/> class.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Name">
            <summary>Gets the name of the tool.</summary>
            <remarks>If <see langword="null"/>, the method name will be used.</remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Title">
            <summary>
            Gets or sets a human-readable title for the tool.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Destructive">
            <summary>
            Gets or sets whether the tool may perform destructive updates to its environment.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Idempotent">
            <summary>
            Gets or sets whether calling the tool repeatedly with the same arguments will have no additional effect on its environment.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.OpenWorld">
            <summary>
            Gets or sets whether this tool may interact with an "open world" of external entities
            (e.g. the world of a web search tool is open, whereas that of a memory tool is not).
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.ReadOnly">
            <summary>
            Gets or sets whether the tool does not modify its environment.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerToolCreateOptions">
            <summary>Provides options for controlling the creation of an <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Services">
            <summary>
            Gets or sets optional services used in the construction of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            These services will be used to determine which parameters should be satisifed from dependency injection; what services
            are satisfied via this provider should match what's satisfied via the provider passed in at invocation time.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Name">
            <summary>
            Gets or sets the name to use for the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but an <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/> is applied to the method,
            the name from the attribute will be used. If that's not present, a name based on the method's name will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Description">
            <summary>
            Gets or set the description to use for the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but a <see cref="T:System.ComponentModel.DescriptionAttribute"/> is applied to the method,
            the description from that attribute will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Title">
            <summary>
            Gets or sets a human-readable title for the tool.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Destructive">
            <summary>
            Gets or sets whether the tool may perform destructive updates to its environment.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Idempotent">
            <summary>
            Gets or sets whether calling the tool repeatedly with the same arguments 
            will have no additional effect on its environment.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.OpenWorld">
            <summary>
            Gets or sets whether this tool may interact with an "open world" of external entities.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.ReadOnly">
            <summary>
            Gets or sets whether this tool does not modify its environment.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerToolCreateOptions.Clone">
            <summary>
            Creates a shallow clone of the current <see cref="T:ModelContextProtocol.Server.McpServerToolCreateOptions"/> instance.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerToolTypeAttribute">
            <summary>
            Used to attribute a type containing methods that should be exposed as MCP tools.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.RequestContext`1">
            <summary>
            Container for the request context.
            </summary>
            <typeparam name="TParams">Type of the request parameters</typeparam>
        </member>
        <member name="M:ModelContextProtocol.Server.RequestContext`1.#ctor(ModelContextProtocol.Server.IMcpServer,`0)">
            <summary>
            Container for the request context.
            </summary>
            <typeparam name="TParams">Type of the request parameters</typeparam>
        </member>
        <member name="T:ModelContextProtocol.Shared.McpEndpoint">
            <summary>
            Base class for an MCP JSON-RPC endpoint. This covers both MCP clients and servers.
            It is not supported, nor necessary, to implement both client and server functionality in the same class.
            If an application needs to act as both a client and a server, it should use separate objects for each.
            This is especially true as a client represents a connection to one and only one server, and vice versa.
            Any multi-client or multi-server functionality should be implemented at a higher level of abstraction.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpEndpoint.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Shared.McpEndpoint"/> class.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:ModelContextProtocol.Shared.McpEndpoint.EndpointName">
            <summary>
            Gets the name of the endpoint for logging and debug purposes.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Shared.McpEndpoint.MessageProcessingTask">
            <summary>
            Task that processes incoming messages from the transport.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpEndpoint.DisposeUnsynchronizedAsync">
            <summary>
            Cleans up the endpoint and releases resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ModelContextProtocol.Shared.McpSession">
            <summary>
            Class for managing an MCP JSON-RPC session. This covers both MCP clients and servers.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.McpSession._pendingRequests">
            <summary>Collection of requests sent on this session and waiting for responses.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.McpSession._handlingRequests">
            <summary>
            Collection of requests received on this session and currently being handled. The value provides a <see cref="T:System.Threading.CancellationTokenSource"/>
            that can be used to request cancellation of the in-flight handler.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpSession.#ctor(System.Boolean,ModelContextProtocol.Protocol.Transport.ITransport,System.String,ModelContextProtocol.Shared.RequestHandlers,ModelContextProtocol.Shared.NotificationHandlers,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Shared.McpSession"/> class.
            </summary>
            <param name="isServer">true if this is a server; false if it's a client.</param>
            <param name="transport">An MCP transport implementation.</param>
            <param name="endpointName">The name of the endpoint for logging and debug purposes.</param>
            <param name="requestHandlers">A collection of request handlers.</param>
            <param name="notificationHandlers">A collection of notification handlers.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:ModelContextProtocol.Shared.McpSession.EndpointName">
            <summary>
            Gets and sets the name of the endpoint for logging and debug purposes.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpSession.ProcessMessagesAsync(System.Threading.CancellationToken)">
            <summary>
            Starts processing messages from the transport. This method will block until the transport is disconnected.
            This is generally started in a background task or thread from the initialization logic of the derived class.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpSession.SendRequestAsync(ModelContextProtocol.Protocol.Messages.JsonRpcRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request to the server.
            It is strongly recommended use the capability-specific methods instead of this one.
            Use this method for custom requests or those not yet covered explicitly by the endpoint implementation.
            </summary>
            <param name="request">The JSON-RPC request to send.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>A task containing the server's response.</returns>
        </member>
        <member name="M:ModelContextProtocol.Shared.RequestHandlers.Set``2(System.String,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``1})">
            <summary>
            Registers a handler for incoming requests of a specific method.
            </summary>
            <typeparam name="TRequest">Type of request payload</typeparam>
            <typeparam name="TResponse">Type of response payload (not full RPC response</typeparam>
            <param name="method">Method identifier to register for</param>
            <param name="handler">Handler to be called when a request with specified method identifier is received</param>
            <param name="requestTypeInfo">The JSON contract governing request serialization.</param>
            <param name="responseTypeInfo">The JSON contract governing response serialization.</param>
        </member>
        <member name="T:ModelContextProtocol.TokenProgress">
            <summary>
            Provides an <see cref="T:System.IProgress`1"/> tied to a specific progress token and that will issue
            progress notifications on the supplied endpoint.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.TokenProgress.#ctor(ModelContextProtocol.IMcpEndpoint,ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <summary>
            Provides an <see cref="T:System.IProgress`1"/> tied to a specific progress token and that will issue
            progress notifications on the supplied endpoint.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.TokenProgress.Report(ModelContextProtocol.ProgressNotificationValue)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Utils.Json.JsonRpcMessageConverter">
            <summary>
            JSON converter for IJsonRpcMessage that handles polymorphic deserialization of different message types.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.JsonRpcMessageConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.JsonRpcMessageConverter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.IJsonRpcMessage,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Utils.Json.McpJsonUtilities">
            <summary>Provides a collection of utility methods for working with JSON data in the context of MCP.</summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.DefaultOptions">
            <summary>
            Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> singleton used as the default in JSON serialization operations.
            </summary>
            <remarks>
            <para>
            For Native AOT or applications disabling <see cref="P:System.Text.Json.JsonSerializer.IsReflectionEnabledByDefault"/>, this instance 
            includes source generated contracts for all common exchange types contained in the ModelContextProtocol library.
            </para>
            <para>
            It additionally turns on the following settings:
            <list type="number">
            <item>Enables string-based enum serialization as implemented by <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter"/>.</item>
            <item>Enables <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull"/> as the default ignore condition for properties.</item>
            <item>Enables <see cref="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString"/> as the default number handling for number types.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.CreateDefaultOptions">
            <summary>
            Creates default options to use for MCP-related serialization.
            </summary>
            <returns>The configured options.</returns>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Single">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableSingle">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CancelledNotification">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IJsonRpcMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcErrorDetail">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcNotification">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ProgressNotification">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ProgressToken">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableProgressToken">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RequestId">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Annotations">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Argument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CallToolRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CallToolResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ClientCapabilities">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CompleteRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CompleteResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Completion">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Content">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ContextInclusion">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableContextInclusion">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CreateMessageRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CreateMessageResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.EmptyResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GetPromptRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GetPromptResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Implementation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.InitializeRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.InitializeResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptsRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptsResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourcesRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourcesResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceTemplatesRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceTemplatesResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListRootsRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListRootsResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListToolsRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListToolsResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.LoggingCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.LoggingLevel">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.LoggingMessageNotificationParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ModelHint">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ModelPreferences">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PingResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Prompt">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PromptArgument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PromptMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PromptsCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ReadResourceRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ReadResourceResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Reference">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RequestParamsMetadata">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Resource">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourceContents">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourcesCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourceTemplate">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourceUpdatedNotificationParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Role">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RoleArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Root">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RootsCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SamplingCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SamplingMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ServerCapabilities">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SetLevelRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SubscribeRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Tool">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ToolAnnotations">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ToolsCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UnsubscribeFromResourceRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UnsubscribeRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.DictionaryStringJsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.DictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyDictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListModelHint">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListRoot">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListSamplingMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPrompt">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptArgument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResource">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceContents">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceTemplate">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListTool">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonDocument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableJsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonNode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.StringArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Utils.ProcessHelper">
            <summary>
            Helper class for working with processes.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Utils.Throw">
            <summary>Provides helper methods for throwing exceptions.</summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder">
            <summary>
            Default implementation of <see cref="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder.Services">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder"/> class.
            </summary>
            <param name="services"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder">
            <summary>
            Builder for configuring <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder.Services">
            <summary>
            Gets the service collection.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions">
            <summary>
            Provides methods for configuring MCP servers via dependency injection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTools``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <typeparam name="TToolType">The tool type.</typeparam>
            <param name="builder">The builder instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <typeparamref name="TToolType"/>
            type, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerTool"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the tool.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTools(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="toolTypes">Types with marked methods to add as tools to the server.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="toolTypes"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <paramref name="toolTypes"/>
            types, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerTool"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the tool.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithToolsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly)">
            <summary>
            Adds types marked with the <see cref="T:ModelContextProtocol.Server.McpServerToolTypeAttribute"/> attribute from the given assembly as tools to the server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="toolAssembly">The assembly to load the types from. Null to get the current assembly</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <typeparam name="TPromptType">The prompt type.</typeparam>
            <param name="builder">The builder instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <typeparamref name="TPromptType"/>
            type, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the prompt.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="promptTypes">Types with marked methods to add as prompts to the server.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTypes"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <paramref name="promptTypes"/>
            types, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the prompt.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPromptsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly)">
            <summary>
            Adds types marked with the <see cref="T:ModelContextProtocol.Server.McpServerPromptTypeAttribute"/> attribute from the given assembly as prompts to the server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="promptAssembly">The assembly to load the types from. Null to get the current assembly</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListResourceTemplatesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListResourceTemplatesRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.ListResourceTemplatesResult}})">
            <summary>
            Sets the handler for list resource templates requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListToolsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.ListToolsResult}})">
            <summary>
            Sets the handler for list tools requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithCallToolHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.CallToolResponse}})">
            <summary>
            Sets the handler for call tool requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListPromptsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListPromptsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.ListPromptsResult}})">
            <summary>
            Sets the handler for list prompts requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithGetPromptHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.GetPromptResult}})">
            <summary>
            Sets the handler for get prompt requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListResourcesRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.ListResourcesResult}})">
            <summary>
            Sets the handler for list resources requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithReadResourceHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ReadResourceRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.ReadResourceResult}})">
            <summary>
            Sets the handler for read resources requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithGetCompletionHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CompleteRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.CompleteResult}})">
            <summary>
            Sets the handler for get completion requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithSubscribeToResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.SubscribeRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.EmptyResult}})">
            <summary>
            Sets the handler for subscribe to resources messages.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithUnsubscribeFromResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.Task{ModelContextProtocol.Protocol.Types.EmptyResult}})">
            <summary>
            Sets or sets the handler for subscribe to resources messages.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithStdioServerTransport(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)">
            <summary>
            Adds a server transport that uses stdin/stdout for communication.
            </summary>
            <param name="builder">The builder instance.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTcpServerTransport(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Action{ModelContextProtocol.Server.McpServerTcpTransportOptions})">
            <summary>
            Adds a server transport that uses TCP connection for communication.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="configureOptions">The options to configure the transport.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.McpServerOptionsSetup">
            <summary>
            Configures the McpServerOptions using addition services from DI.
            </summary>
            <param name="serverHandlers">The server handlers configuration options.</param>
            <param name="serverTools">Tools individually registered.</param>
            <param name="serverPrompts">Prompts individually registered.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerOptionsSetup.#ctor(Microsoft.Extensions.Options.IOptions{ModelContextProtocol.Server.McpServerHandlers},System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerTool},System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerPrompt})">
            <summary>
            Configures the McpServerOptions using addition services from DI.
            </summary>
            <param name="serverHandlers">The server handlers configuration options.</param>
            <param name="serverTools">Tools individually registered.</param>
            <param name="serverPrompts">Prompts individually registered.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerOptionsSetup.Configure(ModelContextProtocol.Server.McpServerOptions)">
            <summary>
            Configures the given McpServerOptions instance by setting server information
            and applying custom server handlers and tools.
            </summary>
            <param name="options">The options instance to be configured.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.McpServerServiceCollectionExtensions">
            <summary>
            Extension to host an MCP server
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerServiceCollectionExtensions.AddMcpServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ModelContextProtocol.Server.McpServerOptions})">
            <summary>
            Adds the MCP server to the service collection with default options.
            </summary>
            <param name="services"></param>
            <param name="configureOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.AI.TemporaryAIFunctionFactory">
            <summary>Provides factory methods for creating commonly used implementations of <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.TemporaryAIFunctionFactory._defaultOptions">
            <summary>Holds the default options instance used when creating function.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.Create(System.Delegate,Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions)">
            <summary>Creates an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instance for a method, specified via a delegate.</summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="options">Metadata to use to override defaults inferred from <paramref name="method"/>.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <remarks>
            <para>
            Return values are serialized to <see cref="T:System.Text.Json.JsonElement"/> using <paramref name="options"/>'s
            <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.SerializerOptions"/>. Arguments that are not already of the expected type are
            marshaled to the expected type via JSON and using <paramref name="options"/>'s
            <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.SerializerOptions"/>. If the argument is a <see cref="T:System.Text.Json.JsonElement"/>,
            <see cref="T:System.Text.Json.JsonDocument"/>, or <see cref="T:System.Text.Json.Nodes.JsonNode"/>, it is deserialized directly. If the argument is anything else unknown,
            it is round-tripped through JSON, serializing the object as JSON and then deserializing it to the expected type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.Create(System.Delegate,System.String,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>Creates an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instance for a method, specified via a delegate.</summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="name">The name to use for the <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="description">The description to use for the <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="serializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> used to marshal function parameters and any return value.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <remarks>
            <para>
            Return values are serialized to <see cref="T:System.Text.Json.JsonElement"/> using <paramref name="serializerOptions"/>.
            Arguments that are not already of the expected type are marshaled to the expected type via JSON and using
            <paramref name="serializerOptions"/>. If the argument is a <see cref="T:System.Text.Json.JsonElement"/>, <see cref="T:System.Text.Json.JsonDocument"/>,
            or <see cref="T:System.Text.Json.Nodes.JsonNode"/>, it is deserialized directly. If the argument is anything else unknown, it is
            round-tripped through JSON, serializing the object as JSON and then deserializing it to the expected type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.Create(System.Reflection.MethodInfo,System.Object,Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="target">
            The target object for the <paramref name="method"/> if it represents an instance method.
            This should be <see langword="null"/> if and only if <paramref name="method"/> is a static method.
            </param>
            <param name="options">Metadata to use to override defaults inferred from <paramref name="method"/>.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <remarks>
            <para>
            Return values are serialized to <see cref="T:System.Text.Json.JsonElement"/> using <paramref name="options"/>'s
            <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.SerializerOptions"/>. Arguments that are not already of the expected type are
            marshaled to the expected type via JSON and using <paramref name="options"/>'s
            <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.SerializerOptions"/>. If the argument is a <see cref="T:System.Text.Json.JsonElement"/>,
            <see cref="T:System.Text.Json.JsonDocument"/>, or <see cref="T:System.Text.Json.Nodes.JsonNode"/>, it is deserialized directly. If the argument is anything else unknown,
            it is round-tripped through JSON, serializing the object as JSON and then deserializing it to the expected type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.Create(System.Reflection.MethodInfo,System.Type,Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The instance method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> to construct an instance of on which to invoke <paramref name="method"/> when
            the resulting <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is invoked. If services are provided,
            ActivatorUtilities.CreateInstance will be used to construct the instance using those services; otherwise,
            <see cref="M:System.Activator.CreateInstance(System.Type)"/> is used, utilizing the type's public parameterless constructor.
            If an instance can't be constructed, an exception is thrown during the function's invocation.
            </param>
            <param name="options">Metadata to use to override defaults inferred from <paramref name="method"/>.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <remarks>
            <para>
            Return values are serialized to <see cref="T:System.Text.Json.JsonElement"/> using <paramref name="options"/>'s
            <see cref="P:Microsoft.Extensions.AI.AIFunctionFactoryOptions.SerializerOptions"/>. Arguments that are not already of the expected type are
            marshaled to the expected type via JSON and using <paramref name="options"/>'s
            <see cref="P:Microsoft.Extensions.AI.AIFunctionFactoryOptions.SerializerOptions"/>. If the argument is a <see cref="T:System.Text.Json.JsonElement"/>,
            <see cref="T:System.Text.Json.JsonDocument"/>, or <see cref="T:System.Text.Json.Nodes.JsonNode"/>, it is deserialized directly. If the argument is anything else unknown,
            it is round-tripped through JSON, serializing the object as JSON and then deserializing it to the expected type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.Create(System.Reflection.MethodInfo,System.Object,System.String,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="target">
            The target object for the <paramref name="method"/> if it represents an instance method.
            This should be <see langword="null"/> if and only if <paramref name="method"/> is a static method.
            </param>
            <param name="name">The name to use for the <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="description">The description to use for the <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="serializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> used to marshal function parameters and return value.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <remarks>
            <para>
            Return values are serialized to <see cref="T:System.Text.Json.JsonElement"/> using <paramref name="serializerOptions"/>.
            Arguments that are not already of the expected type are marshaled to the expected type via JSON and using
            <paramref name="serializerOptions"/>. If the argument is a <see cref="T:System.Text.Json.JsonElement"/>, <see cref="T:System.Text.Json.JsonDocument"/>,
            or <see cref="T:System.Text.Json.Nodes.JsonNode"/>, it is deserialized directly. If the argument is anything else unknown, it is
            round-tripped through JSON, serializing the object as JSON and then deserializing it to the expected type.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionAIFunctionDescriptor">
            <summary>
            A descriptor for a .NET method-backed AIFunction that precomputes its marshalling delegates and JSON schema.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionAIFunctionDescriptor._boxedDefaultCancellationToken">
            <summary>A boxed <see cref="P:System.Threading.CancellationToken.None"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionAIFunctionDescriptor.GetOrCreate(System.Reflection.MethodInfo,Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions)">
            <summary>
            Gets or creates a descriptors using the specified method and options.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionAIFunctionDescriptor.CreateFunctionJsonSchema(System.Reflection.MethodBase,System.String,System.String,System.Text.Json.JsonSerializerOptions,System.Func{System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Determines a JSON schema for the provided method.
            </summary>
            <param name="method">The method from which to extract schema information.</param>
            <param name="title">The title keyword used by the method schema.</param>
            <param name="description">The description keyword used by the method schema.</param>
            <param name="serializerOptions">The options used to extract the schema from the specified type.</param>
            <param name="includeParameter">Delegate controlling whether to include a parameter in the schema.</param>
            <returns>A JSON schema document encoded as a <see cref="T:System.Text.Json.JsonElement"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionAIFunctionDescriptor.GetParameterMarshaller(System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ParameterBindingOptions,System.Reflection.ParameterInfo)">
            <summary>
            Gets a delegate for handling the marshaling of a parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionAIFunctionDescriptor.GetReturnParameterMarshaller(Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionAIFunctionDescriptor.DescriptorKey,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Gets a delegate for handling the result value of a method, converting it into the <see cref="T:System.Threading.Tasks.Task`1"/> to return from the invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.SanitizeMemberName(System.String)">
            <summary>
            Removes characters from a .NET member name that shouldn't be used in an AI function name.
            </summary>
            <param name="memberName">The .NET member name that should be sanitized.</param>
            <returns>
            Replaces non-alphanumeric characters in the identifier with the underscore character.
            Primarily intended to remove characters produced by compiler-generated method name mangling.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.InvalidNameCharsRegex">
            <summary>Regex that flags any character other than ASCII digits or letters or the underscore.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.ReflectionInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>Invokes the MethodInfo with the specified target object and arguments.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.TemporaryAIFunctionFactory.PooledMemoryStream">
            <summary>
            Implements a simple write-only memory stream that uses pooled buffers.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions">
            <summary>
            Represents options that can be provided when creating an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> from a method.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.SerializerOptions">
            <summary>Gets or sets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> used to marshal .NET values being passed to the underlying delegate.</summary>
            <remarks>
            If no value has been specified, the <see cref="P:Microsoft.Extensions.AI.AIJsonUtilities.DefaultOptions"/> instance will be used.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.JsonSchemaCreateOptions">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.AI.AIJsonSchemaCreateOptions"/> governing the generation of JSON schemas for the function.
            </summary>
            <remarks>
            If no value has been specified, the <see cref="P:Microsoft.Extensions.AI.AIJsonSchemaCreateOptions.Default"/> instance will be used.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.Name">
            <summary>Gets or sets the name to use for the function.</summary>
            <value>
            The name to use for the function. The default value is a name derived from the method represented by the passed <see cref="T:System.Delegate"/> or <see cref="T:System.Reflection.MethodInfo"/>.
            </value>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.Description">
            <summary>Gets or sets the description to use for the function.</summary>
            <value>
            The description for the function. The default value is a description derived from the passed <see cref="T:System.Delegate"/> or <see cref="T:System.Reflection.MethodInfo"/>, if possible
            (for example, via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).
            </value>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.AdditionalProperties">
            <summary>
            Gets or sets additional values to store on the resulting <see cref="P:Microsoft.Extensions.AI.AITool.AdditionalProperties" /> property.
            </summary>
            <remarks>
            This property can be used to provide arbitrary information about the function.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ConfigureParameterBinding">
            <summary>Gets or sets a delegate used to determine how a particular parameter to the function should be bound.</summary>
            <remarks>
            <para>
            If <see langword="null"/>, the default parameter binding logic will be used. If non-<see langword="null"/> value,
            this delegate will be invoked once for each parameter in the function as part of creating the <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instance.
            It is not invoked for parameters of type <see cref="T:System.Threading.CancellationToken"/>, which are invariably bound to the token
            provided to the <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)"/> invocation.
            </para>
            <para>
            Returning a default <see cref="T:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ParameterBindingOptions"/> results in the same behavior as if
            <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ConfigureParameterBinding"/> is <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.MarshalResult">
            <summary>Gets or sets a delegate used to determine the <see cref="T:System.Object"/> returned by <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)"/>.</summary>
            <remarks>
            <para>
            By default, the return value of invoking the method wrapped into an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> by <see cref="T:Microsoft.Extensions.AI.AIFunctionFactory"/>
            is then JSON serialized, with the resulting <see cref="T:System.Text.Json.JsonElement"/> returned from the <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)"/> method.
            This default behavior is ideal for the common case where the result will be passed back to an AI service. However, if the caller
            requires more control over the result's marshaling, the <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.MarshalResult"/> property may be set to a delegate that is
            then provided with complete control over the result's marshaling. The delegate is invoked with the value returned by the method,
            and its return value is then returned from the <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)"/> method.
            </para>
            <para>
            When set, the delegate is invoked even for <see langword="void"/>-returning methods, in which case it is invoked with
            a <see langword="null"/> argument. By default, <see langword="null"/> is returned from the <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)"/>
            method for <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instances produced by <see cref="T:Microsoft.Extensions.AI.AIFunctionFactory"/> to wrap
            <see langword="void"/>-returning methods).
            </para>
            <para>
            Methods strongly-typed to return types of <see cref="T:System.Threading.Tasks.Task"/>, <see cref="T:System.Threading.Tasks.Task`1"/>, <see cref="T:System.Threading.Tasks.ValueTask"/>,
            and <see cref="T:System.Threading.Tasks.ValueTask`1"/> are special-cased. For methods typed to return <see cref="T:System.Threading.Tasks.Task"/> or <see cref="T:System.Threading.Tasks.ValueTask"/>,
            <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.MarshalResult"/> will be invoked with the <see langword="null"/> value after the returned task has successfully completed.
            For methods typed to return <see cref="T:System.Threading.Tasks.Task`1"/> or <see cref="T:System.Threading.Tasks.ValueTask`1"/>, the delegate will be invoked with the
            task's result value after the task has successfully completed.These behaviors keep synchronous and asynchronous methods consistent.
            </para>
            <para>
            In addition to the returned value, which is provided to the delegate as the first argument, the delegate is also provided with
            a <see cref="T:System.Type"/> represented the declared return type of the method. This can be used to determine how to marshal the result.
            This may be different than the actual type of the object (<see cref="M:System.Object.GetType"/>) if the method returns a derived type
            or <see langword="null"/>. If the method is typed to return <see cref="T:System.Threading.Tasks.Task"/>, <see cref="T:System.Threading.Tasks.ValueTask"/>, or <see langword="void"/>,
            the <see cref="T:System.Type"/> argument will be <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ParameterBindingOptions">
            <summary>Provides configuration options produced by the <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ConfigureParameterBinding"/> delegate.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ParameterBindingOptions.BindParameter">
            <summary>Gets a delegate used to determine the value for a bound parameter.</summary>
            <remarks>
            <para>
            The default value is <see langword="null"/>.
            </para>
            <para>
            If <see langword="null"/>, the default binding semantics are used for the parameter.
            If non- <see langword="null"/>, each time the <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is invoked, this delegate will be invoked
            to select the argument value to use for the parameter. The return value of the delegate will be used for the parameter's
            value.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ParameterBindingOptions.ExcludeFromSchema">
            <summary>Gets a value indicating whether the parameter should be excluded from the generated schema.</summary>
            <remarks>
            <para>
            The default value is <see langword="false"/>.
            </para>
            <para>
            Typically, this property is set to <see langword="true"/> if and only if <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ParameterBindingOptions.BindParameter"/> is also set to
            non-<see langword="null"/>. While it's possible to exclude the schema when <see cref="P:Microsoft.Extensions.AI.TemporaryAIFunctionFactoryOptions.ParameterBindingOptions.BindParameter"/> is <see langword="null"/>,
            doing so means that default marshaling will be used but the AI service won't be aware of the parameter or able to generate
            an argument for it. This is likely to result in invocation errors, as the parameter information is unlikely to be available.
            It, however, is permissible for cases where invocation of the <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is tightly controlled, and the caller
            is expected to augment the argument dictionary with the parameter value.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructorsWithInherited">
            <summary>
            Specifies all non-public constructors, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethodsWithInherited">
            <summary>
            Specifies all non-public methods, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFieldsWithInherited">
            <summary>
            Specifies all non-public fields, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypesWithInherited">
            <summary>
            Specifies all non-public nested types, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicPropertiesWithInherited">
            <summary>
            Specifies all non-public properties, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEventsWithInherited">
            <summary>
            Specifies all non-public events, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructorsWithInherited">
            <summary>
            Specifies all public constructors, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypesWithInherited">
            <summary>
            Specifies all public nested types, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.AllConstructors">
            <summary>
            Specifies all constructors, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.AllMethods">
            <summary>
            Specifies all methods, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.AllFields">
            <summary>
            Specifies all fields, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.AllNestedTypes">
            <summary>
            Specifies all nested types, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.AllProperties">
            <summary>
            Specifies all properties, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.AllEvents">
            <summary>
            Specifies all events, including those inherited from base classes.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated field or property member will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated field and property members will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            /// Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Threading.ForceYielding">
            <summary>
            await default(ForceYielding) to provide the same behavior as
            await Task.CompletedTask.ConfigureAwait(ConfigureAwaitOptions.ForceYielding).
            </summary>
        </member>
    </members>
</doc>
